generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// yarn prisma migrate dev

model Usuario {
  id       String  @id @default(uuid())
  email    String  @unique
  senha    String
  status   Boolean @default(true)
  rede     String?
  regiaoID String

  regiao Regiao @relation(fields: [regiaoID], references: [id])

  posto        Posto[]
  profissional Profissional[]
  loja         Loja[]
  mapa         Mapa[]
  contato      Contato[]
  banners      Banner[]

  createdAt DateTime? @default(now())

  @@map("usuarios")
}


model Mapa {
  id        String  @id @default(uuid())
  latlng    Json?
  usuarioID String?

  usuario Usuario? @relation(fields: [usuarioID], references: [id])

  @@map("mapas")
}


model Regiao {
  id   String @id @default(uuid())
  nome String

  usuario   Usuario[]
  createdAt DateTime? @default(now())

  @@map("regioes")
}


model Contato {
  id        String   @id @default(uuid())
  nome      String?
  avatar    Json?
  whatsapp  String
  horario   Json?
  setor     String?
  sabado    Boolean?
  domingo   Boolean?
  afastado  Boolean?
  usuarioID String?

  usuario Usuario? @relation(fields: [usuarioID], references: [id])

  @@map("contatos")
}


model Banner {
  id        String  @id @default(uuid())
  link      String
  params    Json
  imagem    Json
  status    Boolean @default(true)
  usuarioID String?

  Usuario   Usuario?  @relation(fields: [usuarioID], references: [id])
  createdAt DateTime? @default(now())

  @@map("banners")
}


model Loja {
  id        String   @id @default(uuid())
  avatar    Json?
  nome      String?
  endereco  String?
  delivery  Boolean? @default(false)
  bairro    String?
  bio       String?
  ponto_ref String?
  tema      Json?
  usuarioID String

  usuario   Usuario   @relation(fields: [usuarioID], references: [id])
  produtos  Produto[]
  createdAt DateTime? @default(now())

  @@map("lojas")
}


model Marca {
  id     String @id @default(uuid())
  nome   String
  avatar Json?

  createdAt DateTime? @default(now())

  @@map("marcas")
}


model Produto {
  id             String   @id @default(uuid())
  codigo         String?
  nome           String
  descricao      String
  preco          Float    @default(0)
  oferta         Float?   @default(0)
  tamanho        String[]
  imagens        Json[]
  cores          String[]
  lojaID         String
  categoriaID    String
  subcategoriaID String?
  campanhaID     String?

  loja         Loja          @relation(fields: [lojaID], references: [id])
  categoria    Categoria     @relation(fields: [categoriaID], references: [id])
  subcategoria SubCategoria? @relation(fields: [subcategoriaID], references: [id])
  campanha     Campanha?     @relation(fields: [campanhaID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("produtos")
}


model Categoria {
  id   String @id @default(uuid())
  nome String

  produto      Produto[]
  subCategoria SubCategoria[]

  createdAt DateTime? @default(now())

  @@map("categorias")
}


model SubCategoria {
  id          String @id @default(uuid())
  nome        String
  categoriaID String

  produto   Produto[]
  categoria Categoria @relation(fields: [categoriaID], references: [id])

  @@map("subcategorias")
}


model Campanha {
  id     String  @id @default(uuid())
  nome   String
  tema   String
  status Boolean @default(false)

  Produto Produto[]

  @@map("campanhas")
}


model Profissional {
  id             String   @id @default(uuid())
  avatar         Json?
  nome           String?
  bairro         String?
  endereco       String?
  bio            String?
  lista_servicos String[]
  profissaoID    String?
  usuarioID      String?

  portfolio Portfolio[]

  usuario   Usuario?   @relation(fields: [usuarioID], references: [id])
  profissao Profissao? @relation(fields: [profissaoID], references: [id])

  createdAt DateTime? @default(now())

  @@map("profissionais")
}


model Portfolio {
  id             String @id @default(uuid())
  imagem         Json
  profissionalID String

  profissional Profissional @relation(fields: [profissionalID], references: [id])

  @@map("portfolios")
}


model Profissao {
  id   String @id @default(uuid())
  nome String

  profissional Profissional[]

  createdAt DateTime? @default(now())

  @@map("profissoes")
}


model Posto {
  id              String  @id @default(uuid())
  avatar          Json?
  nome            String?
  tabela          Json?
  tabela_anterior Json?
  bairro          String?
  usuarioID       String?

  usuario Usuario? @relation(fields: [usuarioID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("postos")
}


model Plano {
  id     String   @id @default(uuid())
  nome   String
  valor  String
  oferta String
  pacote String[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("planos")
}

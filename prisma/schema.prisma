// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// yarn prisma migrate dev

model Usuario {
  id     String  @id @default(uuid())
  email  String  @unique
  senha  String
  status Boolean @default(false)

  regiaoID String
  regiao   Regiao @relation(fields: [regiaoID], references: [id])

  posto        Posto[]
  profissional Profissional[]
  loja         Loja[]
  mapa         Mapa[]
  contato      Contato[]

  @@map("usuarios")
}

model Mapa {
  id     String @id @default(uuid())
  latlng Json?

  usuarioID String?
  usuario   Usuario? @relation(fields: [usuarioID], references: [id])

  @@map("mapas")
}

model Regiao {
  id   String @id @default(uuid())
  nome String

  usuario   Usuario[]
  createdAt DateTime? @default(now())

  @@map("regioes")
}

model Contato {
  id String @id @default(uuid())

  nome     String?
  avatar   Json?
  whatsapp String
  horario  Json?
  setor    String?
  sabado   Boolean?
  domingo  Boolean?

  usuarioID String?
  usuario   Usuario? @relation(fields: [usuarioID], references: [id])

  @@map("contatos")
}

model Banner {
  id String @id @default(uuid())

  rota    String
  id_rota String
  imagem  Json
  lojaID  String  @unique
  loja    Loja    @relation(fields: [lojaID], references: [id])
  status  Boolean @default(false)

  @@map("banners")
}

// ___________________________________

model Loja {
  id        String   @id @default(uuid())
  avatar    Json?
  nome      String?
  endereco  String?
  delivery  Boolean? @default(false)
  bairro    String?
  bio       String?
  ponto_ref String?
  tema      Json?
  usuarioID String
  banner    Banner?

  produtos Produto[]

  usuario Usuario @relation(fields: [usuarioID], references: [id])

  createdAt DateTime? @default(now())

  @@map("lojas")
}

model Produto {
  id        String   @id @default(uuid())
  codigo    String?
  nome      String
  descricao String
  preco     Float    @default(0)
  oferta    Float?   @default(0)
  tamanho   String[]
  imagens   Json[]

  loja   Loja   @relation(fields: [lojaID], references: [id])
  lojaID String

  categoria   Categoria @relation(fields: [categoriaID], references: [id])
  categoriaID String

  campanha   Campanha? @relation(fields: [campanhaID], references: [id])
  campanhaID String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("produtos")
}

model Categoria {
  id   String @id @default(uuid())
  nome String

  produto Produto[]

  createdAt DateTime? @default(now())

  @@map("categorias")
}

model Campanha {
  id     String  @id @default(uuid())
  nome   String
  tema   String
  status Boolean @default(false)

  Produto Produto[]

  @@map("campanhas")
}

// ___________________________________

model Profissional {
  id             String   @id @default(uuid())
  avatar         Json?
  nome           String?
  bairro         String?
  endereco       String?
  bio            String?
  lista_servicos String[]
  profissaoID    String?
  usuarioID      String?
  album          Album[]

  usuario   Usuario?   @relation(fields: [usuarioID], references: [id])
  profissao Profissao? @relation(fields: [profissaoID], references: [id])

  createdAt DateTime? @default(now())

  @@map("profissionais")
}

model Album {
  id             String       @id @default(uuid())
  imagem         Json
  profissional   Profissional @relation(fields: [profissionalID], references: [id])
  profissionalID String

  @@map("albuns")
}

model Profissao {
  id     String  @id @default(uuid())
  nome   String
  avatar String?

  profissional Profissional[]

  createdAt DateTime? @default(now())

  @@map("profissoes")
}

// ___________________________________

model Posto {
  id              String  @id @default(uuid())
  avatar          Json?
  nome            String?
  tabela          Json?
  tabela_anterior Json?
  bairro          String?

  usuarioID String?
  usuario   Usuario? @relation(fields: [usuarioID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("postos")
}

model Plano {
  id String @id @default(uuid())
  nome String
  valor String
  oferta String
  pacote String[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("planos")

}

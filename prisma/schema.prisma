generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//npx prisma migrate dev

model Admin {
  id       String @id @default(uuid())
  user     String
  password String

  @@map("admins")
}

model Owner {
  id       String @id @default(uuid())
  name     String
  whatsapp String
  userID   String

  user User @relation(fields: [userID], references: [id])

  @@map("owners")
}

model Payment {
  id         String  @id @default(uuid())
  expiration String?
  value      String
  userID     String
  status     String? @default("Processando") // Aprovado ou Vencido

  user      User      @relation(fields: [userID], references: [id])
  createdAt DateTime? @default(now())

  @@map("payments")
}

model PaymentBanners {
  id         String  @id @default(uuid())
  expiration String?
  value      String
  userID     String
  status     String? @default("Processando") // Aprovado ou Vencido

  user      User      @relation(fields: [userID], references: [id])
  createdAt DateTime? @default(now())

  @@map("paymentsBanners")
}

model Banner {
  id       String @id @default(uuid())
  image    Json
  route    String
  paramsID String
  userID   String

  user User @relation(fields: [userID], references: [id])

  @@map("banners")
}

model User {
  id       String  @id @default(uuid())
  user     String  @unique
  password String
  regionID String

  payment        Payment[]
  paymentBanners PaymentBanners[]

  owner       Owner[]
  fuelStation FuelStation[]
  person      Person[]
  store       Store[]
  map         Map[]
  contact     Contact[]
  banners     Banner[]
  brand       Brand[]

  region Region @relation(fields: [regionID], references: [id])

  createdAt DateTime? @default(now())

  @@map("users")
}

model Map {
  id     String @id @default(uuid())
  latlng Json?
  userID String

  user User @relation(fields: [userID], references: [id])

  @@map("maps")
}

model Region {
  id   String @id @default(uuid())
  name String

  user      User[]
  createdAt DateTime? @default(now())

  @@map("regions")
}

model Contact {
  id       String   @id @default(uuid())
  name     String?
  avatar   Json?
  whatsapp String
  time     Json?
  sector   String?
  saturday Boolean?
  sunday   Boolean?
  away     Boolean? //afastado
  userID   String?

  user User? @relation(fields: [userID], references: [id])

  @@map("contacts")
}

model Store {
  id        String    @id @default(uuid())
  avatar    Json?
  name      String?
  address   String?
  delivery  Boolean?  @default(false)
  district  String?
  bio       String?
  reference String?
  userID    String
  type      String?   @default("store")
  user      User      @relation(fields: [userID], references: [id])
  product   Product[]
  createdAt DateTime? @default(now())

  @@map("stores")
}

model Brand {
  id     String @id @default(uuid())
  name   String
  avatar Json?
  userID String

  user User? @relation(fields: [userID], references: [id])

  createdAt DateTime? @default(now())

  @@map("brands")
}

model Product {
  id            String   @id @default(uuid())
  reference     String?
  name          String
  description   String
  price         Float    @default(0)
  off           Float?   @default(0)
  size          String
  image         Json
  color         String[]
  storeID       String
  categoryID    String
  subcategoryID String?
  campaignID    String?

  store       Store        @relation(fields: [storeID], references: [id])
  category    Category     @relation(fields: [categoryID], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryID], references: [id])
  campaign    Campaign?    @relation(fields: [campaignID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("products")
}

model Category {
  id   String @id @default(uuid())
  name String

  product     Product[]
  subcategory Subcategory[]

  createdAt DateTime? @default(now())

  @@map("categories")
}

model Subcategory {
  id         String @id @default(uuid())
  name       String
  categoryID String

  product  Product[]
  category Category  @relation(fields: [categoryID], references: [id])

  @@map("subcategories")
}

model Campaign {
  id     String  @id @default(uuid())
  name   String
  theme  String
  status Boolean @default(false)

  product Product[]

  @@map("campaigns")
}

model Person {
  id           String  @id @default(uuid())
  avatar       Json?
  name         String?
  district     String?
  address      String?
  bio          String?
  professionID String?
  userID       String
  type         String? @default("person")

  user       User        @relation(fields: [userID], references: [id])
  profession Profession? @relation(fields: [professionID], references: [id])

  createdAt DateTime? @default(now())

  @@map("persons")
}

model Profession {
  id   String @id @default(uuid())
  name String

  person Person[]

  createdAt DateTime? @default(now())

  @@map("professions")
}

model FuelStation {
  id            String  @id @default(uuid())
  avatar        Json?
  name          String?
  table         Json?
  previoustable Json?
  district      String?
  userID        String

  user User @relation(fields: [userID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("fuelstations")
}
